22 serialization::archive 17 0 0 0 0 49 /home/evgeniya/Desktop/refactored/WSRTI/syncqueue 55 /home/evgeniya/Desktop/refactored/WSRTI/syncqueue/build 0 0 491 0 0 0 1 # 1 1 1 2 18446744073709551615 6 pragma 1 2 1 8 18446744073709551615 4 once 1 9 1 13 18446744073709551615 21 //Author: Ugo Varetto 2 1 2 22 18446744073709551615 21 //! \file SyncQueue.h 4 1 4 22 18446744073709551615 29 //! \brief Synchronized queue 5 1 5 30 18446744073709551615 3 //! 6 1 6 4 18446744073709551615 43 //! Implementation of a synchronized queue. 7 1 7 44 18446744073709551615 1 # 9 1 9 2 18446744073709551615 7 include 9 2 9 9 18446744073709551615 1 < 9 10 9 11 18446744073709551615 5 deque 9 11 9 16 18446744073709551615 1 > 9 16 9 17 18446744073709551615 1 # 10 1 10 2 18446744073709551615 7 include 10 2 10 9 18446744073709551615 1 < 10 10 10 11 18446744073709551615 5 mutex 10 11 10 16 18446744073709551615 1 > 10 16 10 17 18446744073709551615 1 # 11 1 11 2 18446744073709551615 7 include 11 2 11 9 18446744073709551615 1 < 11 10 11 11 18446744073709551615 18 condition_variable 11 11 11 29 18446744073709551615 1 > 11 29 11 30 18446744073709551615 23 //! Synchronized queue: 13 1 13 24 18446744073709551615 27 //! @c Pop() waits for data 14 1 14 28 18446744073709551615 8 template 15 1 15 9 18446744073709551615 1 < 15 9 15 10 18446744073709551615 8 typename 15 10 15 18 18446744073709551615 1 T 15 19 15 20 0 1 > 15 20 15 21 18446744073709551615 5 class 16 1 16 6 18446744073709551615 9 SyncQueue 16 7 16 16 1 1 { 16 17 16 18 18446744073709551615 6 public 17 1 17 7 18446744073709551615 1 : 17 7 17 8 18446744073709551615 63 //! Push data to back of the queue; if a temporary (rvalue ref) 18 5 18 68 18446744073709551615 67 //! is passed then the data is moved into the internal `std::deque` 19 5 19 72 18446744073709551615 13 //! instance. 20 5 20 18 18446744073709551615 4 void 21 5 21 9 18446744073709551615 4 Push 21 10 21 14 2 1 ( 21 14 21 15 2 1 T 21 15 21 16 0 2 && 21 16 21 18 18446744073709551615 1 e 21 19 21 20 3 1 ) 21 20 21 21 2 1 { 21 22 21 23 18446744073709551615 3 std 22 9 22 12 4 2 :: 22 12 22 14 18446744073709551615 10 lock_guard 22 14 22 24 5 1 < 22 24 22 25 18446744073709551615 3 std 22 25 22 28 4 2 :: 22 28 22 30 18446744073709551615 5 mutex 22 30 22 35 6 1 > 22 35 22 36 18446744073709551615 5 guard 22 37 22 42 7 1 ( 22 42 22 43 5 6 mutex_ 22 43 22 49 8 1 ) 22 49 22 50 5 1 ; 22 50 22 51 18446744073709551615 6 queue_ 23 9 23 15 9 1 . 23 15 23 16 18446744073709551615 9 push_back 23 16 23 25 18446744073709551615 1 ( 23 25 23 26 18446744073709551615 3 std 23 26 23 29 4 2 :: 23 29 23 31 18446744073709551615 7 forward 23 31 23 38 10 1 < 23 38 23 39 18446744073709551615 1 T 23 40 23 41 0 1 > 23 42 23 43 18446744073709551615 1 ( 23 43 23 44 18446744073709551615 1 e 23 44 23 45 3 1 ) 23 45 23 46 18446744073709551615 1 ) 23 46 23 47 18446744073709551615 1 ; 23 47 23 48 18446744073709551615 5 cond_ 24 9 24 14 11 1 . 24 14 24 15 12 10 notify_one 24 15 24 25 12 1 ( 24 25 24 26 12 1 ) 24 26 24 27 12 1 ; 24 27 24 28 18446744073709551615 8 //notify 24 29 24 37 18446744073709551615 1 } 25 5 25 6 18446744073709551615 35 //! Push data to back of the queue. 26 5 26 40 18446744073709551615 4 void 27 5 27 9 18446744073709551615 4 Push 27 10 27 14 2 1 ( 27 14 27 15 2 5 const 27 15 27 20 18446744073709551615 1 T 27 21 27 22 0 1 & 27 22 27 23 18446744073709551615 1 e 27 24 27 25 13 1 ) 27 25 27 26 2 1 { 27 27 27 28 18446744073709551615 3 std 28 9 28 12 4 2 :: 28 12 28 14 18446744073709551615 10 lock_guard 28 14 28 24 5 1 < 28 24 28 25 18446744073709551615 3 std 28 26 28 29 4 2 :: 28 29 28 31 18446744073709551615 5 mutex 28 31 28 36 6 1 > 28 37 28 38 18446744073709551615 5 guard 28 39 28 44 14 1 ( 28 44 28 45 5 6 mutex_ 28 45 28 51 8 1 ) 28 51 28 52 5 1 ; 28 52 28 53 18446744073709551615 6 queue_ 29 9 29 15 9 1 . 29 15 29 16 18446744073709551615 9 push_back 29 16 29 25 18446744073709551615 1 ( 29 25 29 26 18446744073709551615 1 e 29 26 29 27 13 1 ) 29 27 29 28 18446744073709551615 1 ; 29 28 29 29 18446744073709551615 5 cond_ 30 9 30 14 11 1 . 30 14 30 15 12 10 notify_one 30 15 30 25 12 1 ( 30 25 30 26 12 1 ) 30 26 30 27 12 1 ; 30 27 30 28 18446744073709551615 8 //notify 30 29 30 37 18446744073709551615 1 } 31 5 31 6 18446744073709551615 32 //! Push data to front of queue. 32 5 32 37 18446744073709551615 58 //! Used to add a high piority message, normally to signal 33 5 33 63 18446744073709551615 21 //! end of operations 34 5 34 26 18446744073709551615 4 void 35 5 35 9 18446744073709551615 9 PushFront 35 10 35 19 15 1 ( 35 19 35 20 15 5 const 35 20 35 25 18446744073709551615 1 T 35 26 35 27 0 1 & 35 27 35 28 18446744073709551615 1 e 35 29 35 30 16 1 ) 35 30 35 31 15 1 { 35 32 35 33 18446744073709551615 3 std 36 9 36 12 4 2 :: 36 12 36 14 18446744073709551615 10 lock_guard 36 14 36 24 5 1 < 36 24 36 25 18446744073709551615 3 std 36 26 36 29 4 2 :: 36 29 36 31 18446744073709551615 5 mutex 36 31 36 36 6 1 > 36 37 36 38 18446744073709551615 5 guard 36 39 36 44 17 1 ( 36 44 36 45 5 6 mutex_ 36 45 36 51 8 1 ) 36 51 36 52 5 1 ; 36 52 36 53 18446744073709551615 6 queue_ 37 9 37 15 9 1 . 37 15 37 16 18446744073709551615 10 push_front 37 16 37 26 18446744073709551615 1 ( 37 26 37 27 18446744073709551615 1 e 37 27 37 28 16 1 ) 37 28 37 29 18446744073709551615 1 ; 37 29 37 30 18446744073709551615 5 cond_ 38 9 38 14 11 1 . 38 14 38 15 12 10 notify_one 38 15 38 25 12 1 ( 38 25 38 26 12 1 ) 38 26 38 27 12 1 ; 38 27 38 28 18446744073709551615 8 //notify 38 29 38 37 18446744073709551615 1 } 39 5 39 6 18446744073709551615 61 //! Push data to front of queue; supports move from temporary 40 5 40 66 18446744073709551615 58 //! Used to add a high piority message, normally to signal 41 5 41 63 18446744073709551615 21 //! end of operations 42 5 42 26 18446744073709551615 4 void 43 5 43 9 18446744073709551615 9 PushFront 43 10 43 19 15 1 ( 43 19 43 20 15 1 T 43 20 43 21 0 2 && 43 21 43 23 18446744073709551615 1 e 43 24 43 25 18 1 ) 43 25 43 26 15 1 { 43 27 43 28 18446744073709551615 3 std 44 9 44 12 4 2 :: 44 12 44 14 18446744073709551615 10 lock_guard 44 14 44 24 5 1 < 44 24 44 25 18446744073709551615 3 std 44 26 44 29 4 2 :: 44 29 44 31 18446744073709551615 5 mutex 44 31 44 36 6 1 > 44 37 44 38 18446744073709551615 5 guard 44 39 44 44 19 1 ( 44 44 44 45 5 6 mutex_ 44 45 44 51 8 1 ) 44 51 44 52 5 1 ; 44 52 44 53 18446744073709551615 6 queue_ 45 9 45 15 9 1 . 45 15 45 16 18446744073709551615 10 push_front 45 16 45 26 18446744073709551615 1 ( 45 26 45 27 18446744073709551615 3 std 45 27 45 30 4 2 :: 45 30 45 32 18446744073709551615 7 forward 45 32 45 39 10 1 < 45 39 45 40 18446744073709551615 1 T 45 41 45 42 0 1 > 45 43 45 44 18446744073709551615 1 ( 45 44 45 45 18446744073709551615 1 e 45 45 45 46 18 1 ) 45 46 45 47 18446744073709551615 1 ) 45 47 45 48 18446744073709551615 1 ; 45 48 45 49 18446744073709551615 5 cond_ 46 9 46 14 11 1 . 46 14 46 15 12 10 notify_one 46 15 46 25 12 1 ( 46 25 46 26 12 1 ) 46 26 46 27 12 1 ; 46 27 46 28 18446744073709551615 8 //notify 46 29 46 37 18446744073709551615 1 } 47 5 47 6 18446744073709551615 51 //! Add elementes in [begin, end) interval to queue 48 5 48 56 18446744073709551615 33 //! in a single atomic operation. 49 5 49 38 18446744073709551615 8 template 50 5 50 13 18446744073709551615 1 < 50 13 50 14 18446744073709551615 8 typename 50 14 50 22 18446744073709551615 4 FwdT 50 23 50 27 20 1 > 50 27 50 28 18446744073709551615 4 void 51 5 51 9 18446744073709551615 6 Buffer 51 10 51 16 21 1 ( 51 16 51 17 18446744073709551615 4 FwdT 51 17 51 21 20 5 begin 51 22 51 27 22 1 , 51 27 51 28 18446744073709551615 4 FwdT 51 29 51 33 20 3 end 51 34 51 37 23 1 ) 51 37 51 38 18446744073709551615 1 { 51 39 51 40 18446744073709551615 3 std 52 9 52 12 4 2 :: 52 12 52 14 18446744073709551615 10 lock_guard 52 14 52 24 5 1 < 52 24 52 25 18446744073709551615 3 std 52 26 52 29 4 2 :: 52 29 52 31 18446744073709551615 5 mutex 52 31 52 36 6 1 > 52 37 52 38 18446744073709551615 5 guard 52 39 52 44 24 1 ( 52 44 52 45 5 6 mutex_ 52 45 52 51 8 1 ) 52 51 52 52 5 1 ; 52 52 52 53 18446744073709551615 5 while 53 9 53 14 18446744073709551615 1 ( 53 14 53 15 18446744073709551615 5 begin 53 15 53 20 22 2 ++ 53 20 53 22 18446744073709551615 2 != 53 23 53 25 18446744073709551615 3 end 53 26 53 29 23 1 ) 53 29 53 30 18446744073709551615 6 queue_ 53 31 53 37 9 1 . 53 37 53 38 18446744073709551615 9 push_back 53 38 53 47 18446744073709551615 1 ( 53 47 53 48 18446744073709551615 1 * 53 48 53 49 18446744073709551615 5 begin 53 49 53 54 22 1 ) 53 54 53 55 18446744073709551615 1 ; 53 55 53 56 18446744073709551615 5 cond_ 54 9 54 14 11 1 . 54 14 54 15 12 10 notify_one 54 15 54 25 12 1 ( 54 25 54 26 12 1 ) 54 26 54 27 12 1 ; 54 27 54 28 18446744073709551615 1 } 55 5 55 6 18446744073709551615 48 //! Return and remove element in front of queue. 56 5 56 53 18446744073709551615 54 //! Waits indefinitely for an element to be available. 57 5 57 59 18446744073709551615 1 T 58 5 58 6 0 3 Pop 58 7 58 10 25 1 ( 58 10 58 11 25 1 ) 58 11 58 12 25 1 { 58 13 58 14 18446744073709551615 3 std 59 9 59 12 4 2 :: 59 12 59 14 18446744073709551615 11 unique_lock 59 14 59 25 26 1 < 59 25 59 26 18446744073709551615 3 std 59 27 59 30 4 2 :: 59 30 59 32 18446744073709551615 5 mutex 59 32 59 37 6 1 > 59 38 59 39 18446744073709551615 4 lock 59 40 59 44 27 1 ( 59 44 59 45 26 6 mutex_ 59 45 59 51 8 1 ) 59 51 59 52 26 1 ; 59 52 59 53 18446744073709551615 55 //stop and wait for notification if condition is false; 60 9 60 64 18446744073709551615 20 //continue otherwise 61 9 61 29 18446744073709551615 5 cond_ 62 9 62 14 11 1 . 62 14 62 15 18446744073709551615 4 wait 62 15 62 19 28 1 ( 62 19 62 20 18446744073709551615 4 lock 62 20 62 24 27 1 , 62 24 62 25 18446744073709551615 1 [ 62 26 62 27 18446744073709551615 4 this 62 27 62 31 18446744073709551615 1 ] 62 31 62 32 18446744073709551615 1 { 62 33 62 34 18446744073709551615 6 return 62 35 62 41 18446744073709551615 1 ! 62 42 62 43 18446744073709551615 6 queue_ 62 43 62 49 9 1 . 62 49 62 50 18446744073709551615 5 empty 62 50 62 55 18446744073709551615 1 ( 62 55 62 56 18446744073709551615 1 ) 62 56 62 57 18446744073709551615 2 || 62 58 62 60 18446744073709551615 5 done_ 62 61 62 66 29 1 ; 62 66 62 67 18446744073709551615 1 } 62 68 62 69 18446744073709551615 1 ) 62 69 62 70 18446744073709551615 1 ; 62 70 62 71 18446744073709551615 2 if 63 9 63 11 18446744073709551615 1 ( 63 11 63 12 18446744073709551615 5 done_ 63 12 63 17 29 1 ) 63 17 63 18 18446744073709551615 6 return 63 19 63 25 18446744073709551615 1 T 63 26 63 27 0 1 ( 63 27 63 28 18446744073709551615 1 ) 63 28 63 29 18446744073709551615 1 ; 63 29 63 30 18446744073709551615 1 T 64 9 64 10 0 1 e 64 11 64 12 30 1 ( 64 12 64 13 18446744073709551615 3 std 64 13 64 16 4 2 :: 64 16 64 18 18446744073709551615 4 move 64 18 64 22 31 1 ( 64 22 64 23 18446744073709551615 6 queue_ 64 23 64 29 9 1 . 64 29 64 30 18446744073709551615 5 front 64 30 64 35 18446744073709551615 1 ( 64 35 64 36 18446744073709551615 1 ) 64 36 64 37 18446744073709551615 1 ) 64 37 64 38 18446744073709551615 1 ) 64 38 64 39 18446744073709551615 1 ; 64 39 64 40 18446744073709551615 6 queue_ 65 9 65 15 9 1 . 65 15 65 16 18446744073709551615 9 pop_front 65 16 65 25 18446744073709551615 1 ( 65 25 65 26 18446744073709551615 1 ) 65 26 65 27 18446744073709551615 1 ; 65 27 65 28 18446744073709551615 6 return 66 9 66 15 18446744073709551615 1 e 66 16 66 17 30 1 ; 66 17 66 18 18446744073709551615 1 } 67 5 67 6 18446744073709551615 11 //! Empty ? 68 5 68 16 18446744073709551615 65 //! This is intended to be used \em only when data access happens 69 5 69 70 18446744073709551615 35 //! from inside a pre-existing loop 70 5 70 40 18446744073709551615 4 bool 71 5 71 9 18446744073709551615 5 Empty 71 10 71 15 32 1 ( 71 15 71 16 32 1 ) 71 16 71 17 32 5 const 71 18 71 23 18446744073709551615 1 { 71 24 71 25 18446744073709551615 3 std 72 9 72 12 4 2 :: 72 12 72 14 18446744073709551615 10 lock_guard 72 14 72 24 5 1 < 72 24 72 25 18446744073709551615 3 std 72 26 72 29 4 2 :: 72 29 72 31 18446744073709551615 5 mutex 72 31 72 36 6 1 > 72 37 72 38 18446744073709551615 2 lg 72 39 72 41 33 1 ( 72 41 72 42 5 6 mutex_ 72 42 72 48 8 1 ) 72 48 72 49 5 1 ; 72 49 72 50 18446744073709551615 5 const 73 9 73 14 18446744073709551615 4 bool 73 15 73 19 18446744073709551615 1 e 73 20 73 21 34 1 = 73 22 73 23 18446744073709551615 6 queue_ 73 24 73 30 9 1 . 73 30 73 31 18446744073709551615 5 empty 73 31 73 36 18446744073709551615 1 ( 73 36 73 37 18446744073709551615 1 ) 73 37 73 38 18446744073709551615 1 ; 73 38 73 39 18446744073709551615 6 return 74 9 74 15 18446744073709551615 1 e 74 16 74 17 34 1 ; 74 17 74 18 18446744073709551615 1 } 75 5 75 6 18446744073709551615 69 //! Notify end of operations: will set end of operations flag to true 76 5 76 74 18446744073709551615 33 //! and notify condition variable 77 5 77 38 18446744073709551615 4 void 78 5 78 9 18446744073709551615 4 Stop 78 10 78 14 35 1 ( 78 14 78 15 35 1 ) 78 15 78 16 35 1 { 78 17 78 18 18446744073709551615 5 done_ 79 9 79 14 29 1 = 79 15 79 16 18446744073709551615 4 true 79 17 79 21 18446744073709551615 1 ; 79 21 79 22 18446744073709551615 5 cond_ 80 9 80 14 11 1 . 80 14 80 15 12 10 notify_one 80 15 80 25 12 1 ( 80 25 80 26 12 1 ) 80 26 80 27 12 1 ; 80 27 80 28 18446744073709551615 8 //notify 80 29 80 37 18446744073709551615 1 } 81 5 81 6 18446744073709551615 69 //! Reset: set end of operations flag to true: allow reuse of current 82 5 82 74 18446744073709551615 18 //! queue instance 83 5 83 23 18446744073709551615 4 void 84 5 84 9 18446744073709551615 5 Reset 84 10 84 15 36 1 ( 84 15 84 16 36 1 ) 84 16 84 17 36 1 { 84 18 84 19 18446744073709551615 5 done_ 85 9 85 14 29 1 = 85 15 85 16 18446744073709551615 5 false 85 17 85 22 18446744073709551615 1 ; 85 22 85 23 18446744073709551615 1 } 86 5 86 6 18446744073709551615 33 //! End of operations requested ? 87 5 87 38 18446744073709551615 4 bool 88 5 88 9 18446744073709551615 4 Done 88 10 88 14 37 1 ( 88 14 88 15 37 1 ) 88 15 88 16 37 5 const 88 17 88 22 18446744073709551615 1 { 88 23 88 24 18446744073709551615 6 return 89 9 89 15 18446744073709551615 5 done_ 89 16 89 21 29 1 ; 89 21 89 22 18446744073709551615 1 } 90 5 90 6 18446744073709551615 17 //! Invoke Done() 91 5 91 22 18446744073709551615 4 bool 92 5 92 9 18446744073709551615 8 operator 92 10 92 18 38 1 ! 92 18 92 19 38 1 ( 92 19 92 20 38 1 ) 92 20 92 21 38 5 const 92 22 92 27 18446744073709551615 1 { 92 28 92 29 18446744073709551615 6 return 93 9 93 15 18446744073709551615 4 Done 93 16 93 20 37 1 ( 93 20 93 21 37 1 ) 93 21 93 22 37 1 ; 93 22 93 23 18446744073709551615 1 } 94 5 94 6 18446744073709551615 6 size_t 95 5 95 11 39 4 Size 95 12 95 16 40 1 ( 95 16 95 17 40 1 ) 95 17 95 18 40 5 const 95 19 95 24 18446744073709551615 1 { 95 25 95 26 18446744073709551615 3 std 96 9 96 12 4 2 :: 96 12 96 14 18446744073709551615 10 lock_guard 96 14 96 24 5 1 < 96 24 96 25 18446744073709551615 3 std 96 26 96 29 4 2 :: 96 29 96 31 18446744073709551615 5 mutex 96 31 96 36 6 1 > 96 37 96 38 18446744073709551615 2 lg 96 39 96 41 41 1 ( 96 41 96 42 5 6 mutex_ 96 42 96 48 8 1 ) 96 48 96 49 5 1 ; 96 49 96 50 18446744073709551615 5 const 97 9 97 14 18446744073709551615 6 size_t 97 15 97 21 39 1 e 97 22 97 23 42 1 = 97 24 97 25 18446744073709551615 6 queue_ 97 26 97 32 9 1 . 97 32 97 33 18446744073709551615 4 size 97 33 97 37 18446744073709551615 1 ( 97 37 97 38 18446744073709551615 1 ) 97 38 97 39 18446744073709551615 1 ; 97 39 97 40 18446744073709551615 6 return 98 9 98 15 18446744073709551615 1 e 98 16 98 17 42 1 ; 98 17 98 18 18446744073709551615 1 } 99 5 99 6 18446744073709551615 7 private 100 1 100 8 18446744073709551615 1 : 100 8 100 9 18446744073709551615 3 std 101 5 101 8 4 2 :: 101 8 101 10 18446744073709551615 5 deque 101 10 101 15 43 1 < 101 15 101 16 18446744073709551615 1 T 101 16 101 17 0 1 > 101 17 101 18 18446744073709551615 6 queue_ 101 19 101 25 9 1 ; 101 25 101 26 18446744073709551615 7 mutable 102 5 102 12 18446744073709551615 3 std 102 13 102 16 4 2 :: 102 16 102 18 18446744073709551615 5 mutex 102 18 102 23 6 6 mutex_ 102 24 102 30 8 1 ; 102 30 102 31 18446744073709551615 3 std 103 5 103 8 4 2 :: 103 8 103 10 18446744073709551615 18 condition_variable 103 10 103 28 44 5 cond_ 103 29 103 34 11 1 ; 103 34 103 35 18446744073709551615 4 bool 104 5 104 9 18446744073709551615 5 done_ 104 10 104 15 29 1 = 104 16 104 17 18446744073709551615 5 false 104 18 104 23 18446744073709551615 1 ; 104 23 104 24 18446744073709551615 1 } 105 1 105 2 18446744073709551615 1 ; 105 2 105 3 18446744073709551615 0 0 45 0 0 0 27 0 0 1 13 0 11 T:SyncQueue 31 1 13 0 9 SyncQueue 21 1 13 0 14 Push:SyncQueue 10 1 13 0 67 21:19:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 22 1 13 0 3 std 31 1 13 0 14 lock_guard:std 4 1 13 0 9 mutex:std 9 1 13 0 67 22:37:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 6 1 13 0 16 mutex_:SyncQueue 6 1 13 0 16 queue_:SyncQueue 49 1 13 0 7 forward 6 1 13 0 15 cond_:SyncQueue 21 1 13 0 33 notify_one:condition_variable:std 10 1 13 0 67 27:24:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 9 1 13 0 67 28:39:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 21 1 13 0 19 PushFront:SyncQueue 10 1 13 0 67 35:29:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 9 1 13 0 67 36:39:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 10 1 13 0 67 43:24:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 9 1 13 0 67 44:39:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 27 1 13 0 67 50:23:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 30 1 13 0 16 Buffer:SyncQueue 10 1 13 0 67 51:22:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 10 1 13 0 67 51:34:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 9 1 13 0 67 52:39:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 21 1 13 0 13 Pop:SyncQueue 31 1 13 0 15 unique_lock:std 9 1 13 0 67 59:40:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 49 1 13 0 4 wait 6 1 13 0 15 done_:SyncQueue 9 1 13 0 67 64:11:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 49 1 13 0 4 move 21 1 13 0 15 Empty:SyncQueue 9 1 13 0 67 72:39:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 9 1 13 0 67 73:20:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 21 1 13 0 14 Stop:SyncQueue 21 1 13 0 15 Reset:SyncQueue 21 1 13 0 14 Done:SyncQueue 21 1 13 0 19 operator!:SyncQueue 20 1 13 0 6 size_t 21 1 13 0 14 Size:SyncQueue 9 1 13 0 67 96:39:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 9 1 13 0 67 97:22:/home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 31 1 13 0 9 deque:std 4 1 13 0 22 condition_variable:std 0 0 1 0 0 0 61 /home/evgeniya/Desktop/refactored/WSRTI/syncqueue/SyncQueue.h 1651142882